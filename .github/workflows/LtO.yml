name: "Build Kernel with LTO"

env:
  CONFIGURATION: "repos.json"
  OUT_DIR: "out"

on:
  workflow_dispatch:

jobs:
  Set-repos:
    name: "üîç Parse repos.json"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
    steps:
      - name: "üì• Checkout"
        uses: actions/checkout@v4

      - name: "üß† Generate Matrix"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          cat ${{ env.CONFIGURATION }} >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "‚öôÔ∏è Build Kernel"
    runs-on: ubuntu-latest
    needs: Set-repos
    strategy:
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      kernelDir: ${{ matrix.repos.kernelSource.name }}_${{ matrix.repos.kernelSource.device }}
      kernelName: ${{ matrix.repos.kernelSource.name }}
      kernelRepo: ${{ matrix.repos.kernelSource.repo }}
      kernelBranch: ${{ matrix.repos.kernelSource.branch }}
      kernelDevice: ${{ matrix.repos.kernelSource.device }}
      ANYKERNEL_NAME: ${{ matrix.repos.anykernelSource.name || 'AnyKernel3' }}
      ANYKERNEL_SOURCE: ${{ matrix.repos.anykernelSource.repo }}
      ANYKERNEL_SOURCE_BRANCH: ${{ matrix.repos.anykernelSource.branch }}
      DEFCONFIG_NAME: stock_defconfig
      withKernelSU: ${{ matrix.repos.withKernelSU }}
    steps:
      - name: "üìÅ Prepare workspace"
        run: mkdir -p $kernelDir

      - name: "üì¶ Install dependencies"
        run: |
          sudo apt update
          sudo apt install -y build-essential bc git wget curl zip gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi \
            libssl-dev lz4 lzop zstd device-tree-compiler libarchive-tools python3 \
            clang lld llvm

      - name: "üß¨ Clone kernel source"
        working-directory: ./${{ env.kernelDir }}
        run: git clone --recursive --depth=1 -b $kernelBranch $kernelRepo $kernelName

      - name: "üîß Setup build arguments"
        id: build-args
        working-directory: ./${{ env.kernelDir }}
        env:
          params: "${{ toJSON(matrix.repos.params) }}"
        run: |
          ARCH=$(echo $params | jq -r ".ARCH")
          CROSS_COMPILE=$(echo $params | jq -r ".CROSS_COMPILE")
          CROSS_COMPILE_ARM32=$(echo $params | jq -r ".CROSS_COMPILE_ARM32")
          CLANG_TRIPLE=$(echo $params | jq -r ".CLANG_TRIPLE")
          CC=$(echo $params | jq -r ".CC")
          AR=$(echo $params | jq -r ".AR")
          NM=$(echo $params | jq -r ".NM")
          OBJCOPY=$(echo $params | jq -r ".OBJCOPY")
          OBJDUMP=$(echo $params | jq -r ".OBJDUMP")
          STRIP=$(echo $params | jq -r ".STRIP")
          LD=$(echo $params | jq -r ".LD")

          echo "ARCH=$ARCH" >> $GITHUB_ENV
          echo "CC=$CC" >> $GITHUB_ENV

          args="-j$(nproc)"
          args="$args O=$(pwd)/${{ env.OUT_DIR }}"
          args="$args ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE CROSS_COMPILE_ARM32=$CROSS_COMPILE_ARM32"
          args="$args CLANG_TRIPLE=$CLANG_TRIPLE"
          args="$args CC=$CC AR=$AR NM=$NM OBJCOPY=$OBJCOPY OBJDUMP=$OBJDUMP STRIP=$STRIP LD=$LD"
          echo "args=$args" >> $GITHUB_OUTPUT

      - name: "üß© Update KernelSU (optional)"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        if: ${{ env.withKernelSU == 'true' }}
        run: |
          curl -LSs https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh | bash -s main
          echo -e "\nCONFIG_KPROBES=y\nCONFIG_HAVE_KPROBES=y\nCONFIG_KPROBE_EVENTS=y" >> arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}

      - name: "üìò Make defconfig"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.build-args.outputs.args }}
        run: |
          make $args ${{ env.DEFCONFIG_NAME }}
          grep -i LTO .config || echo "‚ö†Ô∏è LTO not found in .config"

      - name: "üõ† Compile Kernel"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.build-args.outputs.args }}
        run: |
          make $args CONFIG_DEBUG_SECTION_MISMATCH=y

      - name: "üì¶ Package with AnyKernel3"
        working-directory: ./${{ env.kernelDir }}
        run: |
          git clone --depth=1 -b $ANYKERNEL_SOURCE_BRANCH $ANYKERNEL_SOURCE $ANYKERNEL_NAME
          rm -rf $ANYKERNEL_NAME/.git*

          BOOT_DIR=${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot

          for img in Image.gz-dtb Image.gz Image dtbo.img; do
            [ -f "$BOOT_DIR/$img" ] && cp "$BOOT_DIR/$img" "$ANYKERNEL_NAME/$img"
          done

      - name: "‚¨ÜÔ∏è Upload kernel zip"
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ env.kernelDevice }}-${{ env.kernelName }}
          path: ./${{ env.kernelDir }}/${{ env.ANYKERNEL_NAME }}

      - name: "üìè Show Image.gz size"
        run: |
          ls -lh ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz || true
