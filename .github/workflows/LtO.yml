name: Kernel Build with ThinLTO

on:
  workflow_dispatch:
  push:
    branches: [ stable ]
  pull_request:
    branches: [ stable ]

env:
  DEVICE: "rmx2193"  # CHANGE THIS to your device defconfig name
  KERNEL_DIR: "kernel"
  CLANG_DIR: "clang"
  THINLTO_CACHE: "thinlto_cache"  # Cache directory for ThinLTO

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 180  # ThinLTO is faster than full LTO but may still need time

    steps:
    - name: Checkout kernel source
      uses: actions/checkout@v4
      with:
        repository: Ponleuz12/kernel_realme_sm4250
        ref: stable
        path: ${{ env.KERNEL_DIR }}

    - name: Checkout Clang toolchain
      uses: actions/checkout@v4
      with:
        repository: techyminati/android_prebuilts_clang_host_linux-x86_clang-6443078
        ref: 11.0.1
        path: ${{ env.CLANG_DIR }}

    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y \
          build-essential flex bison libssl-dev libelf-dev \
          bc python3 git make gcc zip ninja-build

    - name: Setup ThinLTO environment
      shell: bash
      run: |
        echo "PATH=${{ github.workspace }}/${{ env.CLANG_DIR }}/bin:$PATH" >> $GITHUB_ENV
        echo "THINLTO_CACHE_DIR=${{ github.workspace }}/${{ env.THINLTO_CACHE }}" >> $GITHUB_ENV
        mkdir -p ${{ env.THINLTO_CACHE }}
        
        # Verify ThinLTO support in Clang
        clang --version
        ld.lld --version

    - name: Configure ThinLTO
      shell: bash
      run: |
        cd ${{ env.KERNEL_DIR }}
        
        # Enable ThinLTO specific configurations
        echo "CONFIG_LTO=y" >> arch/arm64/configs/vendor/${{ env.DEVICE }}_defconfig
        echo "CONFIG_LTO_CLANG=y" >> arch/arm64/configs/vendor/${{ env.DEVICE }}_defconfig
        echo "CONFIG_THINLTO=y" >> arch/arm64/configs/vendor/${{ env.DEVICE }}_defconfig
        
        # Optional: Set cache size (in MB)
        echo "CONFIG_THINLTO_CACHE_SIZE=1024" >> arch/arm64/configs/vendor/${{ env.DEVICE }}_defconfig

    - name: Build with ThinLTO
      shell: bash
      run: |
        cd ${{ env.KERNEL_DIR }}
        
        export ARCH=arm64
        export SUBARCH=arm64
        export LLVM=1
        export LLVM_IAS=1
        export CLANG_TRIPLE=aarch64-linux-gnu-
        export CROSS_COMPILE=aarch64-linux-gnu-
        export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
        
        # ThinLTO specific flags
        export THINLTO_CACHE_DIR=$THINLTO_CACHE_DIR
        export THINLTO_CACHE_POLICY="cache_size=2G:cache_size_bytes=2g"
        
        make O=out vendor/${{ env.DEVICE }}_defconfig
        
        make -j$(nproc --all) O=out \
          CC="clang" \
          LD="ld.lld" \
          AR="llvm-ar" \
          NM="llvm-nm" \
          STRIP="llvm-strip" \
          OBJCOPY="llvm-objcopy" \
          KCFLAGS="-mthinlto -Wl,-thinlto-cache-dir=$THINLTO_CACHE_DIR"

    - name: Package artifacts
      if: success()
      run: |
        cd ${{ env.KERNEL_DIR }}
        mkdir -p artifacts
        cp out/arch/arm64/boot/Image.gz-dtb artifacts/
        zip -r kernel-thinlto.zip artifacts/

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: kernel-thinlto-build
        path: ${{ env.KERNEL_DIR }}/kernel-thinlto.zip
